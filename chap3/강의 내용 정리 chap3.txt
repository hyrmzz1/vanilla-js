interactive with HTML
JS가 브라우저를 움직이게 하는 방법을 알아보자.

#3.0 - #3.1
JS는 HTML에 접근하고, 읽어올 수 있다.

document는 우리의 웹사이트를 의미한다.
콘솔에서 document 입력하면 HTML을 JS의 관점에서 읽을 수 있다. (object들이 와르르 .. ; document.title 등등)
document라는 object(객체)는 js에서 html 파일을 불러오게 함.
document 객체 안에는 여러 함수들이 존재.
// const funcName = document.getElementId("함수"); => html에 있는 함수의 id 가져옴.
getElementId()는 id 반환 (배열이 아닌 하나의 값!!)

JS가 HTML을 변경시킬 수도 있다!!!
JS는 HTML의 element를 가져올 수 있고, 변경할 수 있다.
서버와 클라이언트 간의 통신은 html이 아닌 JS를 통해 이루어지기 때문에 JS에서 HTML의 element들을 다룰 수 있어야 하는 것.
html은 정적 resource(;자원)이다. => 변경할 수 없는 상태.
interactive하게 상황에 따라 변경가능하도록 하는 것은 JS. html의 요소를 때에 따라 표시 및 변경해줌.

#3.2
in html
<h1 class="hello">Grab me</h1>
<h1 class="hello">Grab me</h1>

in JS
const hellos = document.getElementsByClassName("hello");
// getElementsByClassName() : 많은 element 가져올 때 사용. array 반환
console.log(hellos);	//h1.hello 가 두개 뜬다.

getElementsByTagName() : name을 할당. array 반환

querySelector를 이용해서 element 찾을 수 있음.
querySelector는 하나의 element 반환. (조건에 맞는 element가 여러개여도 첫번째 element만 반환함)
조건에 맞는 element 모두 반환하고 싶다면 querySelectorAll 함수 사용.
CSS selector 방식으로 검색 가능. #~~ => id / .~~ => class
querySelector(".hello h1") 은 hello라는 class name 가진 태그 바로 아래의 h1 태그를 호출한다.

querySelector("#hello") 와 getElementId("hello") 는 같으나, 후자는 하위요소를 못가져옴.
=> querySelector를 사용하자!

#3.3 events(1)
JS가 html 가져올 수 있는 이유는 html 파일 내에 <script src="jsname.js"></script> 코드가 있기 때문이다.
// 해당 코드는 html의 <body>내 맨 아래에 작성!

console.dir 사용하면 element의 내부를 볼 수 있다. => 내부 항목 보고, 변경할 수도 있음.

how to listen the event?
-click event
const title = document.querySelector("div.hello:first-child h1");
// title은 id가 hello인 첫번째 div의 하위 h1

function handleTitleClick(){
	title.style.color = "green";
}

title.addEventListener("click",handleTitleClick);
// title을 click 하면 handleTitleClick 함수가 발생. handleTitleClick()라고 작성하지 않아야 함.⭐
// click event가 발생할 때 JS가 대신 함수 실행시키는 것을 바라기 때문.
// handleTitleClick()라고 입력하면 함수가 자체적으로 실행된다.

#3.4 events(2) .. use addEventListener
이벤트 검색법
: h1 html element mdn 검색 후 Web APIs 라는 문장 포함된 페이지 찾기.
// JS 관점의 HTML heading element라는 의미임.

console.dir() 입력하면 콘솔에 element들이 뜨는데, on으로 시작하는 것들이 적용 가능한 events!
ex) onmouseenter는 mouseenter 이벤트 사용 가능하다는 것.

title.addEventListener("mouseenter", handleMouseEnter);	
// 이벤트명에 괄호치기.
// 함수명에 괄호 X. 괄호있으면 바로 실행됨. 하지만 우리는 이벤트 발생시 실행되기를 원하므로.
// title은 위에서 const로 정의된 변수. (querySelector 이용) 
// handle~은 funtion handle~(){}으로 정의된 함수. {} 안에 이벤트 발생시 어떻게 변하게 할지 작성하면 된다.

title.addEventListener()를 작성 후 이벤트를 넘겨준다!
 
#3.5 events(3) ..use another way to listen event
title.onmouseenter = handleMouseEnter; 꼴로도 가능하다.
하지만 .addEventListener()를 더 선호! 왜냐하면 .removeEventListener 로 제거 가능하기 때문.

document의 body/head/title 는 매우 중요한 태그이기 때문에 콘솔에서 document.body 하면 뜸! 나머지는 X.

#3.6 CSS in JS
강의보고 해볼것. if-else 문 이용해 color 변화시키기.
h1.style.color 가 매 줄마다 들어가니 const와 let을 통해 변수화 시키기.

JS 안에서 CSS 를 실행시켰다.

#3.7 CSS in JS(2)
Style은 css에, animation은 JS에 각각 작성해본다

CSS 안에 .active{} 작성하고, JS 함수 내부에 h1.className = "active"; 작성

* raw string; 오타없이 정확히 작성해야함 => 여러번 사용해야하면 오타가능성 있어서 위험.
따라서 위에 const activeClass 통해 변수로 만들어 사용. => JS 가 에러시 알려준다.
raw string은 변수로 만들 때 대문자 사용

#3.8 CSS in JS(3)
JS의 className는 태초의 CSS를 간직하지 않음! 그렇다고 JS와 CSS 두 파일 모두에서 코드 수정하는건 굉장히 비효율적
=> classList 사용	// contains

h1을 코드에 작성할 때 h1.classList.contains(유지하고픈 이벤트 클래스) 로 작성하면 그 클래스 계속 유지된다!

toggle("")	// "" 안에 있는 이벤트(토큰) 존재유무 확인 후 없으면 추가하고 있으면 제거한다.
